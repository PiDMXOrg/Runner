name: PiDMX
on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "**"
    paths-ignore:
      - ".gitignore"
      - "README.md"
      # ignore CI for other platforms
      - ".github/actions/**"
      - ".github/workflows/CI-iOS-Qt5.yml"
      - ".github/workflows/CI-iOS.yml"
      - ".github/workflows/CI-Linux.yml"
      - ".github/workflows/CI-macOS.yml"
      - ".github/workflows/CI-Windows-Qt5.yml"
      - ".github/workflows/CI-Windows.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  QT_VERSION: 6.4.2
  
jobs:
  buildMacOS:
    if: "contains(github.event.head_commit.message, 'build macos')"
    name: Build PiDMX (MacOS)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          submodules: recursive
          fetch-depth: 0
          
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Download Qt (desktop)
        id: qt-desktop
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==2.1.*
          version: ${{ env.QT_VERSION }}
          modules: qtserialport
          set-env: true
          
      - name: Setup SSH
        uses: MrSquaare/ssh-setup-action@v1
        with:
            host: github.com
            private-key: ${{ secrets.SSH_PRIVATE_KEY }}
            
      - name: Cloning PiDMX switching to main
        working-directory: source
        run: |
          cd ..
          git clone git@github.com:PiDMXOrg/PiDMX.git
          cd PiDMX
          git checkout main
          cd ../source

      - name: Cloning PiDMX Common and switching to main
        working-directory: source
        run: |
          cd ..
          git clone git@github.com:PiDMXOrg/PiDMX_Common.git
          cd PiDMX_Common
          git checkout main
          cd ../source
          
      - name: Cloning KDabDockWIdgets 2.0
        working-directory: source
        run: |
          cd ..
          git clone https://github.com/KDAB/KDDockWidgets.git
          cd KDDockWidgets
          git checkout 2.0
          cd ../source
          
      - name: Building KDabDockWIdgets 2.0
        working-directory: source
        run: |
          cd ../KDDockWidgets
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_INSTALL_PREFIX=../../KDDockWidgets_out -DKDDockWidgets_QTQUICK=ON -DKDDockWidgets_QT6=ON -DCMAKE_BUILD_TYPE=Release -DKDDockWidgets_DEVELOPER_MODE=OFF -DKDDockWidgets_EXAMPLES=OFF ../
          cmake --build .
          cmake --build . --target install
          cd ../../source
        
# -DCMAKE_OSX_DEPLOYMENT_TARGET="10.13.6" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_PREFIX_PATH="${Qt5_DIR}" ..
      - name: Build (Release)
        working-directory: source
        run: |
          cd ../PiDMX
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B "./build"
          cmake --build ./build
          
      - name: Deploying
        working-directory: source
        run: |
          cd ../PiDMX/build
          macdeployqt ./PiDMX.app -qmldir=../src/QML/Views
      
      - name: Codesign app bundle
        working-directory: source
        # Extract the secrets we defined earlier as environment variables
        env: 
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |        
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain        
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime ./../PiDMX/build/PiDMX.app -v

      - name: "Notarize app bundle"
        working-directory: source
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "./../PiDMX/build/PiDMX.app" "./../PiDMX/build/notarization.zip"
          echo "Notarize app"
          xcrun notarytool submit "./../PiDMX/build/notarization.zip" --keychain-profile "notarytool-profile" --wait
          echo "Attach staple"
          xcrun stapler staple "./../PiDMX/build/PiDMX.app"

      - name: Pack artifacts
        working-directory: source
        run: |
          cd ../PiDMX/build
          tar -cvf pidmx-macos.tar PiDMX.app
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.1.4
        with:
          name: pidmx-macos
          path: |
            ./PiDMX/build/pidmx-macos.tar
            
  buildWindows:
    if: "contains(github.event.head_commit.message, 'build windows')"
    name: Build PiDMX (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          submodules: recursive
          fetch-depth: 0
          
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Download Qt (desktop)
        id: qt-desktop
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==2.1.*
          version: ${{ env.QT_VERSION }}
          modules: qtserialport
          set-env: true
          arch: 'win64_mingw'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
            
      - name: Cloning PiDMX switching to main
        working-directory: source
        run: |
          cd ..
          git clone git@github.com:PiDMXOrg/PiDMX.git
          cd PiDMX
          git checkout main
          cd ../source

      - name: Cloning PiDMX Common and switching to main
        working-directory: source
        run: |
          cd ..
          git clone git@github.com:PiDMXOrg/PiDMX_Common.git
          cd PiDMX_Common
          git checkout main
          cd ../source
          
      - name: Cloning KDabDockWIdgets 2.0
        working-directory: source
        run: |
          cd ..
          git clone https://github.com/KDAB/KDDockWidgets.git
          cd KDDockWidgets
          git checkout 2.0
          cd ../source
          
      - name: Building KDabDockWIdgets 2.0
        working-directory: source
        run: |
          cd ../KDDockWidgets
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_PREFIX_PATH=%Qt6_DIR% -DKDDockWidgets_QTQUICK=ON -DCMAKE_INSTALL_PREFIX="./../../KDDockWidgets_out" -DKDDockWidgets_QT6=ON -DCMAKE_BUILD_TYPE=Release -DKDDockWidgets_DEVELOPER_MODE=OFF -DKDDockWidgets_EXAMPLES=OFF ../
          cmake --build .
          cmake --build . --target install
          cd ../../source
        env:
          CC: gcc
          CXX: g++
        
# -DCMAKE_OSX_DEPLOYMENT_TARGET="10.13.6" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_PREFIX_PATH="${Qt5_DIR}" ..
      - name: Build (Release)
        working-directory: source
        run: |
          cd ../PiDMX
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH=%Qt6_DIR% -S . -B "./build" -G "MinGW Makefiles"
          cmake --build ./build
        env:
          CC: gcc
          CXX: g++
          
      - name: Deploying
        working-directory: source
        run: |
          cd ../PiDMX/build
          mkdir deploy
          mv ./PiDMX.exe ./deploy/PiDMX.exe
          mv ./src/libPiDMXLib.dll ./deploy/libPiDMXLib.dll
          mv ./../../KDDockWidgets_out/bin/libkddockwidgets-qt62.dll ./deploy/libkddockwidgets-qt62.dll
          mv ./src/Qt-Secret/src/libQt-Secret.dll ./deploy/libQt-Secret.dll
          mv ./src/Qt-Secret/src/mini-gmp/src/libQtBigint.dll ./deploy/libQtBigint.dll
          cd deploy
          windeployqt ./PiDMX.exe --qmldir=./../../src/QML/Views --compiler-runtime
          windeployqt ./libPiDMXLib.dll --qmldir=./../../src/QML/Views --compiler-runtime

      - name: Pack artifacts
        working-directory: source
        run: |
          cd ../PiDMX/build
          tar -cvf pidmx-windows.tar ./deploy
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v2.1.4
        with:
          name: pidmx-windows
          path: |
            D:/a/Runner/Runner/PiDMX/build/pidmx-windows.tar
